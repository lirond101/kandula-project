pipeline {
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub.lirondadon')
    }
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                metadata:
                  namespace: jenkins
                  labels:
                    app: jnlp
                  name: jnlp
                spec:
                  containers:
                  - name: jnlp
                    image: jenkins/inbound-agent
                    imagePullPolicy: IfNotPresent
                    resources: {}
                  - name: dind
                    image: docker:19.03.11-dind
                    securityContext:
                      privileged: true
                    tty: true
                    volumeMounts:
                      - name: docker-graph-storage
                        mountPath: /var/lib/docker
                  volumes:
                    - name: docker-graph-storage
                      emptyDir: {}   
                '''
        }
    }
    stages {
        stage('Clone') {
            steps {
                git branch: 'mid-project', credentialsId: 'github.integration', url: 'git@github.com:lirond101/kandula-app-9.git'
            }
        }
        
        stage('Building Image') {
            steps {
                container('dind') {
                    sh 'docker build --network=host -t lirondadon/kandula-test .'
                    sh 'docker image ls'
                }
            }
        }
        
        stage('Pushing Image') {
            steps {
                container('dind') {
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                    sh 'docker push lirondadon/kandula-test:latest'
                }
            }
        }
        
        stage('Deploying React.js container to Kubernetes') {
            steps {
                script {
                    kubernetesDeploy(configs: "kuar-app.yaml")
                }
            }
        }
        post {
            always {
                container('dind') {
                    sh 'docker logout'
                }
            }
        }
    }
}